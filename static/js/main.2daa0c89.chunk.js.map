{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","setMuvies","_useState","useState","_useState2","_slicedToArray","inputQuery","setInputQuery","_useState3","_useState4","setMuvie","_useState5","_useState6","loading","setLoading","_useState7","_useState8","error","setError","_Fragment","onSubmit","e","query","preventDefault","fetch","concat","then","res","json","catch","Response","Error","data","img","Poster","Title","Plot","imdbID","finally","htmlFor","type","id","placeholder","classNames","value","onClick","onChange","target","disabled","App","muvi","some","muv","prev","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2daa0c89.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  setMuvies: (value: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ setMuvies }) => {\n  const [inputQuery, setInputQuery] = useState('');\n  const [movie, setMuvie] = useState<Movie | null>();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    getMovie(inputQuery).then((data) => {\n      if ('Title' in data) {\n        const img = data.Poster === 'N/A'\n          ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n          : data.Poster;\n\n        setMuvie({\n          title: data.Title,\n          description: data.Plot,\n          imgUrl: img,\n          imdbId: data.imdbID,\n          imdbUrl: `https://www.imdb.com/title/${data.imdbID}`,\n        });\n      } else {\n        setError(true);\n      }\n    })\n      .finally(() => setLoading(false));\n  };\n\n  const handleInput = () => {\n    setError(false);\n  };\n\n  const addMuvies = () => {\n    if (movie) {\n      setMuvies(movie);\n      setMuvie(null);\n      setInputQuery('');\n    }\n  };\n\n  const verifyInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputQuery(e.target.value);\n    setError(false);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={onSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': error,\n              })}\n              value={inputQuery}\n              onClick={handleInput}\n              onChange={verifyInput}\n            />\n          </div>\n          {error && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              disabled={!inputQuery}\n              className={classNames('button is-light', {\n                'is-loading': loading,\n              })}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addMuvies}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n\n        </div>\n      </form>\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          {movie && (\n            <MovieCard movie={movie} />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'http://www.omdbapi.com/?i=tt3896198&apikey=d2c919cb';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMuvies] = useState<Movie[]>([]);\n\n  const verifyMuvies = (muvi: Movie) => {\n    const verify = movies.some(muv => muv.imdbId === muvi.imdbId);\n\n    if (!verify) {\n      setMuvies((prev) => [...prev, muvi]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          setMuvies={verifyMuvies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}